{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getTime","zip","zipcode_to_timezone","lookup","console","log","time","moment","tz","format","setState","timezone","getWeather","zipCode","document","getElementById","value","axios","get","url","then","res","data","name","temperature","Math","floor","main","temp","weather","handleKeyPress","event","key","id","onKeyPress","this","type","placeholder","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qVAkEeA,G,kNAzDbC,MAAQ,G,EAERC,QAAU,WACR,IAAIC,EAAMC,IAAoBC,OAAO,EAAKJ,MAAME,KAChDG,QAAQC,IAAIJ,GACZ,IAAIK,EAAOC,MAASC,GAAGP,GAAKQ,OAAO,WACnCL,QAAQC,IAAIC,GACZ,EAAKI,SAAS,CACZC,SAAUL,K,EAIdM,WAAa,WACX,IAAIC,EAAUC,SAASC,eAAe,YAAYC,MAIlDC,IACGC,IAAIC,uDAAeN,EAAfM,6DACJC,MAAK,SAACC,GACLjB,QAAQC,IAAIgB,EAAIC,MAChB,EAAKZ,SAAS,CACZT,IAAKY,EACLU,KAAMF,EAAIC,KAAKC,KACfC,YAAaC,KAAKC,MAAML,EAAIC,KAAKK,KAAKC,MACtCC,QAASR,EAAIC,KAAKO,QAAQ,GAAGF,OAE/B,EAAK3B,c,EAIX8B,eAAiB,SAACC,GACE,UAAdA,EAAMC,KACR,EAAKpB,c,uDAKP,OACE,yBAAKqB,GAAG,YACN,2BACEC,WAAYC,KAAKL,eACjBM,KAAK,OACLC,YAAY,eACZJ,GAAG,aAEL,yBAAKK,UAAU,gBACb,yBAAKL,GAAG,QAAQE,KAAKpC,MAAMwB,MAC3B,yBAAKU,GAAG,QAAQE,KAAKpC,MAAMyB,aAC3B,yBAAKS,GAAG,WAAWE,KAAKpC,MAAM8B,SAC9B,yBAAKI,GAAG,YAAYE,KAAKpC,MAAMY,gB,GAnDvB4B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,SDyHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.c9d9f070.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"moment-timezone\";\nimport moment from \"moment\";\nimport zipcode_to_timezone from \"zipcode-to-timezone\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {};\n\n  getTime = () => {\n    var zip = zipcode_to_timezone.lookup(this.state.zip);\n    console.log(zip);\n    var time = moment().tz(zip).format(\"hh:mm z\");\n    console.log(time);\n    this.setState({\n      timezone: time,\n    });\n  };\n\n  getWeather = () => {\n    let zipCode = document.getElementById(\"zipInput\").value;\n    const api = process.env.REACT_APP_WEATHER_API_KEY;\n    let url = \"https://api.openweathermap.org/data/2.5/weather?\";\n\n    axios\n      .get(url + \"zip=\" + zipCode + \"&units=imperial&us&appid=\" + api)\n      .then((res) => {\n        console.log(res.data);\n        this.setState({\n          zip: zipCode,\n          name: res.data.name,\n          temperature: Math.floor(res.data.main.temp),\n          weather: res.data.weather[0].main,\n        });\n        this.getTime();\n      });\n  };\n\n  handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      this.getWeather();\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"userInfo\">\n        <input\n          onKeyPress={this.handleKeyPress}\n          type=\"text\"\n          placeholder=\"EnterZipcode\"\n          id=\"zipInput\"\n        ></input>\n        <div className=\"returnedInfo\">\n          <div id=\"name\">{this.state.name}</div>\n          <div id=\"temp\">{this.state.temperature}</div>\n          <div id=\"weather\">{this.state.weather}</div>\n          <div id=\"timeZone\">{this.state.timezone}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}